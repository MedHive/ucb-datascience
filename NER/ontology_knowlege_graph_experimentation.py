# -*- coding: utf-8 -*-
"""Ontology_Knowlege_Graph_Experimentation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eQwdTDlt_T7EMOfu_pJXZaF5mpGDzhBe
"""

Ontology_text = """"@prefix 510k: <http://www.example.org/510k#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://www.example.org/510k>
  rdf:type owl:Ontology ;
  rdfs:label "510(k) Premarket Notification Ontology" .

#################################################################
#    Classes
#################################################################

### Core Submission Classes ###

# [cite_start]The overarching class representing a single 510(k) Premarket Notification. [cite: 1]
510k:Submission rdf:type owl:Class .

# [cite_start]The device for which the 510(k) is being submitted. [cite: 2]
510k:MedicalDevice rdf:type owl:Class .

# [cite_start]A legally marketed device to which the new device is compared for substantial equivalence. [cite: 3]
510k:PredicateDevice rdf:type owl:Class .

# [cite_start]The core argument demonstrating equivalence. [cite: 4]
510k:SubstantialEquivalenceDiscussion rdf:type owl:Class .

# The entity submitting the 510(k).
510k:Applicant rdf:type owl:Class .

### Supporting Documentation Classes ###

# [cite_start]A general class for any submitted document. [cite: 5]
510k:Documentation rdf:type owl:Class .

# [cite_start]Information about tests conducted. [cite: 6]
510k:TestingData rdf:type owl:Class .

# [cite_start]Information related to the device's labeling. [cite: 7]
510k:Labeling rdf:type owl:Class .

# [cite_start]Specific details if the device contains software. [cite: 9]
510k:SoftwareInformation rdf:type owl:Class .

# [cite_start]Evidence of compliance with quality system regulations (e.g., 21 CFR 820). [cite: 10]
510k:QualitySystemDocumentation rdf:type owl:Class .

# [cite_start]Various statements required. [cite: 11]
510k:Declaration rdf:type owl:Class .

#################################################################
#    Object Properties
#################################################################

510k:hasPredicateDevice rdf:type owl:ObjectProperty ;
  rdfs:domain 510k:MedicalDevice ;
  rdfs:range 510k:PredicateDevice .

510k:comparesToPredicate rdf:type owl:ObjectProperty ;
  rdfs:domain 510k:MedicalDevice ;
  rdfs:range 510k:PredicateDevice .

510k:hasApplicant rdf:type owl:ObjectProperty ;
  rdfs:domain 510k:Submission ;
  rdfs:range 510k:Applicant .

510k:concernsDevice rdf:type owl:ObjectProperty ;
  rdfs:domain 510k:Submission ;
  rdfs:range 510k:MedicalDevice .

510k:includesDocumentation rdf:type owl:ObjectProperty ;
  rdfs:domain 510k:Submission ;
  rdfs:range 510k:Documentation .

510k:hasSubstantialEquivalenceDiscussion rdf:type owl:ObjectProperty ;
  rdfs:domain 510k:Submission ;
  rdfs:range 510k:SubstantialEquivalenceDiscussion .

510k:supportedByTestingData rdf:type owl:ObjectProperty ;
  rdfs:domain [
      owl:unionOf (
        510k:SubstantialEquivalenceDiscussion
        510k:MedicalDevice
      )
    ] ;
  rdfs:range 510k:TestingData .

510k:includesLabeling rdf:type owl:ObjectProperty ;
  rdfs:domain 510k:MedicalDevice ;
  rdfs:range 510k:Labeling .

510k:hasSoftwareComponent rdf:type owl:ObjectProperty ;
  rdfs:domain 510k:MedicalDevice ;
  rdfs:range 510k:SoftwareInformation .

#################################################################
#    Data Properties
#################################################################

### Submission Properties ###
510k:hasSubmissionType rdf:type owl:DatatypeProperty ;
  rdfs:domain 510k:Submission ;
  rdfs:range xsd:string .

510k:hasKNumber rdf:type owl:DatatypeProperty ;
  rdfs:domain 510k:Submission ;
  rdfs:range xsd:string .

510k:hasSubmissionDate rdf:type owl:DatatypeProperty ;
  rdfs:domain 510k:Submission ;
  rdfs:range xsd:date .

510k:hasDecisionStatus rdf:type owl:DatatypeProperty ;
  rdfs:domain 510k:Submission ;
  rdfs:range xsd:string .

510k:hasDecisionDate rdf:type owl:DatatypeProperty ;
  rdfs:domain 510k:Submission ;
  rdfs:range xsd:date .

### Medical Device Properties ###
510k:hasTradeName rdf:type owl:DatatypeProperty ;
  rdfs:domain 510k:MedicalDevice ;
  rdfs:range xsd:string .

510k:hasCommonName rdf:type owl:DatatypeProperty ;
  rdfs:domain 510k:MedicalDevice ;
  rdfs:range xsd:string .

510k:hasClass rdf:type owl:DatatypeProperty ;
  rdfs:comment "e.g., 'Class II'" ;
  rdfs:domain 510k:MedicalDevice ;
  rdfs:range xsd:string .

510k:hasProductCode rdf:type owl:DatatypeProperty ;
  rdfs:domain 510k:MedicalDevice ;
  rdfs:range xsd:string .

510k:hasRegulationNumber rdf:type owl:DatatypeProperty ;
  rdfs:domain 510k:MedicalDevice ;
  rdfs:range xsd:string .

510k:hasIntendedUseText rdf:type owl:DatatypeProperty ;
  rdfs:domain 510k:MedicalDevice ;
  rdfs:range xsd:string .

510k:hasIndicationsForUseText rdf:type owl:DatatypeProperty ;
  rdfs:domain 510k:MedicalDevice ;
  rdfs:range xsd:string .

510k:hasDeviceDescriptionText rdf:type owl:DatatypeProperty ;
  rdfs:domain 510k:MedicalDevice ;
  rdfs:range xsd:string .

### Predicate Device Properties ###
510k:hasPredicateKNumber rdf:type owl:DatatypeProperty ;
  rdfs:domain 510k:PredicateDevice ;
  rdfs:range xsd:string .

510k:hasPredicateName rdf:type owl:DatatypeProperty ;
  rdfs:domain 510k:PredicateDevice ;
  rdfs:range xsd:string .

510k:hasPredicateManufacturer rdf:type owl:DatatypeProperty ;
  rdfs:domain 510k:PredicateDevice ;
  rdfs:range xsd:string .

510k:hasPredicateClearanceDate rdf:type owl:DatatypeProperty ;
  rdfs:domain 510k:PredicateDevice ;
  rdfs:range xsd:date .

### Testing Data Properties ###
510k:hasTestType rdf:type owl:DatatypeProperty ;
  rdfs:domain 510k:TestingData ;
  rdfs:range xsd:string .

510k:hasTestOutcome rdf:type owl:DatatypeProperty ;
  rdfs:comment "e.g., 'Pass', 'Fail'" ;
  rdfs:domain 510k:TestingData ;
  rdfs:range xsd:string .

510k:hasTestSummaryText rdf:type owl:DatatypeProperty ;
  rdfs:domain 510k:TestingData ;
  [cite_start]rdfs:range xsd:string . [cite: 12]

### Software Information Properties ###
510k:hasSoftwareVersion rdf:type owl:DatatypeProperty ;
  rdfs:domain 510k:SoftwareInformation ;
  [cite_start]rdfs:range xsd:string . [cite: 12]

510k:isOffTheShelfSoftware rdf:type owl:DatatypeProperty ;
  rdfs:domain 510k:SoftwareInformation ;
  [cite_start]rdfs:range xsd:boolean . [cite: 12]

### Applicant Properties ###
510k:hasApplicantName rdf:type owl:DatatypeProperty ;
  rdfs:domain 510k:Applicant ;
  rdfs:range xsd:string .

510k:hasContactEmail rdf:type owl:DatatypeProperty ;
  rdfs:domain 510k:Applicant ;
  rdfs:range xsd:string .

510k:hasPhoneNumber rdf:type owl:DatatypeProperty ;
  rdfs:domain 510k:Applicant ;
  rdfs:range xsd:string ."""

!pip install rdflib

from rdflib import Graph, Literal, URIRef, Namespace
from rdflib.namespace import XSD

# Read the ontology text from the file
try:
    with open(Ontology_text, "r") as f:
        ontology_content = f.read()
except FileNotFoundError:
    print(f"Error: The file '{Ontology_text}' was not found.")
    ontology_content = None

if ontology_content:
    # Create an RDF graph
    g = Graph(Ontology_text)

    # Parse the ontology content into the graph
    try:
                      g.parse(data=Ontology_text, format="ttl") # Assuming the content is in Turtle format
                      print("Ontology parsed successfully. Knowledge graph created.")

                      # Define the namespace for easier use (assuming this is the correct namespace from the ontology)
                      five10k = Namespace("http://www.example.org/510k#")

                      # --- Add your knowledge graph data here ---
                      # You can add instances and relationships based on your data and the ontology.
                      # Example: Adding an instance of a Submission
                      submission1 = URIRef("<http://www.example.org/510k#")
                      g.add((submission1, five10k.hasKNumber, Literal("K123456")))
                      g.add((submission1, five10k.hasSubmissionType, Literal("Traditional")))
                      g.add((submission1, five10k.hasSubmissionDate, Literal("2023-10-26", datatype=XSD.date)))

                      # Example of querying the graph (optional)
                      print("\nTriples in the graph (ontology triples):")
                      for s, p, o in g:
                        print(s, p, o)

except Exception e: print(f"Error parsing ontology content: {e}");

!pip install networkx matplotlib

import networkx as nx
import matplotlib.pyplot as plt
from rdflib import Graph

# Assuming your rdflib graph is named 'g' from the previous cell execution

# Create a NetworkX graph
G = nx.DiGraph()

# Add nodes and edges from the RDF graph
for s, p, o in g:
    # Use the string representation of URIs and Literals as nodes
    G.add_node(str(s))
    G.add_node(str(o))
    # Add an edge with the predicate as the edge label
    G.add_edge(str(s), str(o), label=str(p))

# Draw the graph
plt.figure(figsize=(12, 8)) # Adjust figure size as needed
pos = nx.spring_layout(G) # Choose a layout algorithm

nx.draw(G, pos, with_labels=False, node_size=50, edge_color='gray', alpha=0.6)
# Draw edge labels
nx.draw_networkx_edge_labels(G, pos, edge_labels=nx.get_edge_attributes(G, 'label'), font_size=8)
# Draw node labels separately to avoid overlap
nx.draw_networkx_labels(G, pos, font_size=10)

plt.title("Knowledge Graph Visualization")
plt.show()